package org.opencv.samples.facedetect;

import java.util.Calendar;

import junit.framework.Assert;

import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.support.v4.app.NavUtils;
import android.annotation.TargetApi;
import android.os.Build;

public class LowPowerActivity extends Activity {

    //my variables
    private static final int        START_HOUR          = 6;
    private static final int        END_HOUR            = 19;
    private static final int        MINUTES_BTWN_CHECKS = 5;
    private static final int        MS_PER_MIN          = 60000;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_low_power);
        // Show the Up button in the action bar.
        //setupActionBar(); //this causes a nullPointerException
                
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        new Handler().postDelayed(new Runnable() {
            public void run() {
                wakeOnTime();
            }
        }, 1000);
        /*new Handler().postDelayed(new Thread() {
            public void run() {
                wakeOnTime();
            }
        }, 1000);*/
           
    }

    /**
     * Set up the {@link android.app.ActionBar}, if the API is available.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    private void setupActionBar() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            getActionBar().setDisplayHomeAsUpEnabled(true);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.low_power, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case android.R.id.home:
            // This ID represents the Home or Up button. In the case of this
            // activity, the Up button is shown. Use NavUtils to allow users
            // to navigate up one level in the application structure. For
            // more details, see the Navigation pattern on Android Design:
            //
            // http://developer.android.com/design/patterns/navigation.html#up-vs-back
            //
            NavUtils.navigateUpFromSameTask(this);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
    /*
     * My Functions: 
     * Most of the above code, beside variables, were automatically generated by 
     * eclipse. Note that the loop in this function is a poor method of accomplishing 
     * our timer-goal. This loop, although run in a new thread, freezes the app
     * and the app fails to respond to a back-button or to the following onTouchEvent.
     */    
    public void wakeOnTime() {
        Calendar cal;
        int currentHour;
        do {
            cal = Calendar.getInstance();
            currentHour = cal.get(Calendar.HOUR_OF_DAY);
            //debug info
            System.out.println(currentHour);
            //dont check too often
            /*try { Thread.currentThread().sleep(2500);}//MINUTES_BTWN_CHECKS / 5 * MS_PER_MIN); }
            catch ( Exception e ) { }*/
            new Handler().sendEmptyMessageDelayed(1, 2500);
        }
        while(currentHour < START_HOUR || END_HOUR < currentHour);
        System.out.println("NOW FINISHING WOOO");
        finish();
    }
}
